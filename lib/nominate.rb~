=begin

A gem for accessing the NOMINATE political mapping program (both W and DW)
from Ruby.

Written by Will May
willmayecon@gmail.com

Requirements:
Linux OS
GFortran
R, with the 'wnominate' package

=end

require 'nominate/fixer.rb'




class Chamber
  def initialize
    @sessions = []
  end

  def add_session(session)
    @sessions.push session
  end

  def sessions
    @sessions
  end

  def dwnominate
    # dw_check()
    Dir.mkdir('nominate') unless Dir.exist?('nominate')
    Dir.chdir('nominate')
    check_ws(@sessions)
    write_dw(@sessions)
    system '/home/will/nominate/dw-nominate'
    Dir.chdir('..')
  end
end


class Session
  def initialize()
    @legislators = {}
    @bills = []
    # party is 'unknown' by default
    @parties = Hash.new('unknown')
    @prefix = ''
    # variable for assigning each legislator a number
    @x = 1
  end
  def add_leg(leg)
    @legislators.push leg
  end
  def get_legs
    @legislators
  end
  def add_bill(bill)
    @bills.push bill
    bill.votes.each_key do |name|
      if not @legislators.has_key? name
        @legislators[name] = @x
        @x += 1
      end
    end
  end
  def get_bills
    @bills
  end
  def add_party(leg, party)
    @parties[leg] = party
  end

  def wnominate(file_prefix = 'wnom_')
    Dir.mkdir('nominate') unless Dir.exist?('nominate')
    Dir.chdir('nominate')
    @prefix = file_prefix
    write_wnom(@legislators, @bills, @parties)
    was_good = system 'Rscript /home/will/nominate/nominate.R'
    if was_good != true
      puts 'Something went wrong.'
      puts 'If you have not installed R, please install R and try again.'
      exit
    else
      files = ['votes.csv', 'legislators.csv', 'rollcalls.csv',
               'dimensions.csv', 'eigenvalues.csv', 'beta.csv', 'weights.csv',
               'fits.csv', 'Rplots.pdf']
      files.each { |file| File.rename(file, file_prefix + file) }
    end
    Dir.chdir('..')
  end

  def prefix
    @prefix
  end
  def prefix=(prefix)
    @prefix = prefix
  end

end


# Bill class

class Bill
  @@vote_key = { "Yea" => "Y", "Y" => "Y", "Yes" => "Y",
                 "Nay" => "N", "N" => "N", "No" => "N" }
  def initialize(bill_text)
    @text = bill_text
    # 'M' for 'missing' is the default vote
    @votes = Hash.new('M')
  end
  def add_vote(leg, vote1)
    vote = @@vote_key[vote1]
    if vote == 'Y' or vote == 'N'
      @votes[leg] = vote
    else
      @votes[leg] = 'M'
    end
  end
  def votes
    @votes
  end
  def get_text
    @text
  end
end

class Legislator
  def initialize(name, party)
    @name = name
    @party = party
    @votes = {}
  end
  def addVote(bill, vote)
    if vote == 'Y' or vote == 'N'
      @votes[bill] = vote
    else
      @votes[bill] = 'M'
    end
  end
  def getVotes
    @votes
  end
  def getParty
    @party
  end
end


# W-NOMINATE class

class Wnominate
end


# DW-NOMINATE class

class DWnominate
end


def dw_check
  # compile DW-NOMINATE if needed
  entries = Dir.entries(Dir.pwd)
  if not entries.include?("dw-nominate")
    puts "You have not compiled DW-NOMINATE in this folder."
    puts "DW-NOMINATE must be compiled to run."
    puts "Would you like to compile DW-NOMINATE? (y/n)"
    answer = gets.chomp.downcase
    if answer == 'y'
      was_good = system "gfortran DW-NOMINATE.FOR -o dw-nominate"
      if was_good != true
        puts "You need to install GFortran to compile DW-NOMINATE."
        exit
      else
        puts ""
        puts ""
        puts "Code compiled successfully."
      end
    end
  end
end

def check_ws(sessions)
  sessions.each_with_index do |session, i|
    session_prefix = 'session_' + (i+1).to_s + '_'
    if not Dir.entries(Dir.pwd).include?(session_prefix + 'legislators.csv')
      Dir.chdir('..')
      session.wnominate(session_prefix)
      Dir.chdir('nominate')
    else
      session.prefix = session_prefix
    end
  end
end


def write_wnom(legislators, bills, parties)
  final = []
  # write output in format 'Bob Smith|party|Y|Y|N|Y|N|N|...'
  legislators.each_key do |leg|
    line = leg + '|' + parties[leg]
    bills.each { |bill| line << '|' + bill.votes[leg] }
    final.push line
  end
  File.open('votes.csv', 'w') { |f1| f1.puts final }
end
